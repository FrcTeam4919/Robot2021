// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import frc.robot.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Joystick joystick;
    public static Joystick buttonBoard;
    public JoystickButton TowerExtend;
    public JoystickButton TowerRetract;
    public JoystickButton Intake;
    public JoystickButton RevIntake;
    public JoystickButton Shoot;
    public JoystickButton ShooterBlock;
    public JoystickButton ShooterUnblock;
    public JoystickButton LimelightSeek;
    public JoystickButton LimelightAim;
    private TowerE towerE;
    private TowerR towerR;
    private ShooterShoot shooterShoot;
    private ShooterBlock shooterBlock;
    private ShooterUnblock shooterUnblock;
    private ShooterIntake shooterIntake;
    private ShooterRevIntake shooterRevIntake;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick = new Joystick(1);
        buttonBoard = new Joystick(0);

        //towerE = new TowerE();
        TowerExtend = new JoystickButton(buttonBoard, 1);
        TowerExtend.whileHeld(new TowerE());
        TowerExtend.whenReleased(new TowerE().Stop());

        //towerR = new TowerR();
        TowerRetract = new JoystickButton(buttonBoard, 2);
        TowerRetract.whileHeld(new TowerR());
        TowerRetract.whenReleased(new TowerR().Stop());

        //shooterShoot = new ShooterShoot();
        Shoot = new JoystickButton(buttonBoard, 3);
        Shoot.whileHeld(new ShooterShoot());
        Shoot.whenReleased(new ShooterShoot().Stop());

        //shooterBlock = new ShooterBlock();
        ShooterBlock = new JoystickButton(buttonBoard, 4);
        ShooterBlock.whileHeld(new ShooterBlock());
        ShooterBlock.whenReleased(new ShooterBlock().Stop());

        //shooterUnblock = new ShooterUnblock();
        ShooterUnblock = new JoystickButton(buttonBoard, 5);
        ShooterUnblock.whileHeld(new ShooterUnblock());
        ShooterUnblock.whenReleased(new ShooterUnblock().Stop());

        //shooterIntake = new ShooterIntake();
        Intake = new JoystickButton(buttonBoard, 6);
        Intake.whileHeld(new ShooterIntake());
        Intake.whenReleased(new ShooterIntake().Stop());

        //shooterRevIntake = new ShooterRevIntake();
        RevIntake = new JoystickButton(buttonBoard, 7);
        RevIntake.whileHeld(new ShooterRevIntake());
        RevIntake.whenReleased(new ShooterRevIntake().Stop());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick() {
        return joystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

